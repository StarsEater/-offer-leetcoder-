二分是万万没想到这么难的
思路：两边各自都是单增的，不同的是左侧数字大一些，左右起始索引记为i,j (i<j)
j>   m = (i+j)>>1  >= i，等号取在j=i+1时
numbers[m]  如果和numbers[i]比较的问题，i所处位置的可能是左侧的部分，也可能是右侧，无法确定是左移还是右移
numbers[m] < numbers[j], 》》 m在右侧的部分,注意可能就踩在旋转点上 》》 j = m
numbers[m] > numbers[j], 》》 m在左侧的部分 》》 i = m+1
numbers[m] == numbers[j] 就可能在左侧或右侧
a情况 1，0，1，1，1 ，i=0,j=4,m=2,右侧不在旋转点上 
b情况 1，0，1，1    ，i=0,j=3,m=1,右侧在旋转点上
c情况 1，1，0，1    ，i=0,j=3,m=1,左侧
1）用j，j=m-1,b情况错误,j=m,c情况出错
2）用i, i=m,a情况出错
==》 使用m作为比较不可行
1）i=i+1如何？a情况会将i逐步后移，旋转点不可能在里头了
2）j=j-1如何？a情况，j向前移动，m不断逼近旋转点，情况变为b
              b情况下，最终经历numbers[m] < numbers[j],j=m,i在左侧，j在旋转点上，i=j都在旋转点上了
              c情况，j向前，站在旋转点时，如果j之前的都和它相等那无所谓了，如果j之前的大于它，i会向后移直至与ji重合
              
所以最终是i==j时跳出

class Solution:
    def minArray(self, numbers: List[int]) -> int:
        l,r = 0,len(numbers)-1
        # l可能在大的有序部分，r一定小的有序部分
        while(l<r):
            m = (l+r)>>1
            if numbers[m] > numbers[r]:
                l = m+1
            elif numbers[m] < numbers[r]:
                r = m    
            else:
                r -= 1    
        return numbers[r]

