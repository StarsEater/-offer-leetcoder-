挺简单，就是细节容易错，记录一下
class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        # nxn dfs
        m,n = len(board),len(board[0]) 
        def dfs(i,j,k):
            if not 0<=i<m or not 0<=j<n or not board[i][j]==word[k]:return False
            if k==len(word)-1:return True
            tmp,board[i][j]=board[i][j],"/"
            f =  dfs(i+1,j,k+1) or dfs(i-1,j,k+1) or dfs(i,j-1,k+1) or dfs(i,j+1,k+1) 
            board[i][j] = tmp 
            return f      

        for i in range(m):
            for j in range(n):
                if dfs(i,j,0):
                    return True
        return False   
思路dfs
上来直接判断边界，越界，或者不匹配或者word到了len-1，之后迭代的判断就简洁多了。
