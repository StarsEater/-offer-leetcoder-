dp开始是想到的，可是太傻，用了递归，复杂度爆炸，当然也有错误的，懒得改了
这道题0，1边界挺绕的
个人感觉其实就是一个离散函数的卷积
初始化抛掷一个骰子的情况就是
                   g0 = [u(n-1)-u(n-7)]
                   h = [u(n-1)-u(n-7)]
迭代方式           g_i = h * g_{i-1}

上面这个还是没有往下想
---------------------------------
每一步都从上一步得到，且上一步的结果是个对称，操作也是对称的，感觉结果也是
思路：f(i,k) = f(i-1,k-1)+f(i-1,k-2)+..f(i-1,k-6),减去当前骰子各种结果的情况也就6种。
我是每次现在原数组的size范围内，得到当前情况size范围的情况，
如果原数组从[f(i-1,i-1),f(i-1,6i-6)],那么当前数组就是[f(i,i),f(i,6i-5)]，剩下[f(i,6i-4),f(i,6i)]
换句话说，f(i,k)是第m个位置的话，=上一步数组的第m个位置向前5个数+第m个位置的数。
计算完成之后，剩下5个数，从当前数组的前5给数复制过去
from copy import deepcopy as cp
class Solution:
    def twoSum(self, n: int) -> List[float]:
        # 0,1,2,3,4,5,6
        ans1 = [1]*6
        ans2 = [1]*6
        m = 6**n
        for i in range(2,n+1):
            for j in range(1,len(ans1)):
                if j < 6:
                    ans2[j] = ans2[j-1] + ans1[j] 
                else:
                    ans2[j] = ans2[j-1]-ans1[j-6]+ans1[j]   
            ans2 += ans2[4::-1]
            ans1 = cp(ans2)   
        return [x/m for x in ans2] 
--------------------------------------------------------------------------
又想了想，发现，既然对称只需要一半数计算出来就可以了，然而看似简单，我却得了个教训
计算下一步时，1、明确上一步数组有多大
              2、当前步会计算多少个数
              3、拼接得到的数组长度又是多少
这次问题就在，在拼接之前以为数组的长度就是长度的一般，其实还有上一步的残留
from copy import deepcopy as cp
class Solution:
    def twoSum(self, n: int) -> List[float]:
        # 0,1,2,3,4,5,6
        ans1 = [1]*6
        ans2 = [1]*6
        m = 6**n
        for i in range(2,n+1):
            t = (5*i+2)>>1
            r = 5*i- t
            print(t,r)
            for j in range(1,t):
                if j < 6:
                    ans2[j] = ans2[j-1] + ans1[j] 
                else:
                    ans2[j] = ans2[j-1]-ans1[j-6]+ans1[j]           
            ans2 = ans2[:t]+ans2[r::-1] # t很重要
            ans1 = cp(ans2)   
        return [x/m for x in ans2]
----------------------------------------------------------------------
然后就是dp了，从后向前是万万没想到的，只需要使用一个数组就OK了，害我上面还用了deepcopy
class Solution:
    def twoSum(self, n: int) -> List[float]:
        # [i,6i] ==> 5i+1 =>[0,5i]
        dp = [1]*6+[0]*(5*n-5)
        m = 6**n
        for i in range(2,n+1):
            for j in range(5*i,0,-1):
                dp[j] = sum(dp[max(0,j-5):j+1]) 
        return list(map(lambda x: x/m,dp)
--------------------------------------------------------
easy is hard
